/*
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 
Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
*/

var findMedianSortedArrays = function(nums1, nums2) {
    const mergedArray = mergeArrays(nums1, nums2);
    const totalLength = mergedArray.length;
    
    if (totalLength % 2 === 0) {
        const midRight = totalLength / 2;
        const midLeft = midRight - 1;
        return (mergedArray[midLeft] + mergedArray[midRight]) / 2;
    } else {
        const midIndex = Math.floor(totalLength / 2);
        return mergedArray[midIndex];
    }
};

function mergeArrays(nums1, nums2) {
    const mergedArray = [];
    let i = 0, j = 0;
    
    while (i < nums1.length && j < nums2.length) {
        if (nums1[i] < nums2[j]) {
            mergedArray.push(nums1[i]);
            i++;
        } else {
            mergedArray.push(nums2[j]);
            j++;
        }
    }
    
    while (i < nums1.length) {
        mergedArray.push(nums1[i]);
        i++;
    }
    
    while (j < nums2.length) {
        mergedArray.push(nums2[j]);
        j++;
    }
    
    return mergedArray;
}
